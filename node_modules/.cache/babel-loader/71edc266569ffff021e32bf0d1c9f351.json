{"ast":null,"code":"import axios from \"axios\";\nimport ApplicationError from \"../utils/ApplicationError\"; // import request from 'request';\n// import {\n//   generateHeaders,\n//   detectLocale,\n//   getRequestConfigForLogging,\n//   // getSummaryObjectForApiResponseTime,\n//   getHistogramObjectForApiResponseTime,\n// } from '../utils/Helpers';\n// import Logger from '../utils/Logger';\n// // const summary = getSummaryObjectForApiResponseTime();\n// const histogram = getHistogramObjectForApiResponseTime();\n// TODO: Intercept all responses for data and time logging purposes\n\nclass Service {\n  /**\n   * The base fetch method to get data from APIs\n   * @param {Object} requestConfig\n   * @param {String} requestConfig.method Method of request. Eg. GET, POST, PUT, DELETE, PATCH.\n   * @param {String} requestConfig.base Base domain of the request. This is the part of the URL before the path.\n   * @param {String} requestConfig.path Path of the request.\n   * @param {String} requestConfig.timeout Timout of the request in milliseconds.\n   * @param {Object} requestData\n   * @param {Object} requestData.params The GET parameters for the request.\n   * @param {Object} requestData.headers Custom headers that need to be part of the request.\n   * @param {Object} requestData.postData The POST data for the request.\n   * @return {Promise} Returns the promise object for the request.\n   */\n  static fetch() {\n    let {\n      method = \"GET\",\n      base = \"\",\n      path,\n      timeout = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let {\n      params = {},\n      headers = {},\n      postData = {}\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const defaultHeaders = {};\n    const defaultParams = {};\n    let requestData = {};\n\n    if (Object.keys(postData).length > 0) {\n      requestData.data = postData;\n    }\n\n    console.log(requestData, data);\n    const requestHeaders = { ...defaultHeaders\n    };\n    const requestParams = { ...defaultParams,\n      ...params\n    };\n    const requestEndpoint = base + path;\n    const requestMethod = method.toUpperCase();\n    const requestConfig = {\n      url: requestEndpoint,\n      method: requestMethod,\n      headers: requestHeaders,\n      params: requestParams,\n      ...(requestMethod !== \"GET\" ? requestData : {}),\n      responseType: \"json\" // proxy: {\n      //   protocol: 'http',\n      //   host: 'localhost',\n      //   port: 8081,\n      // },\n\n    };\n    return new Promise((resolve, reject) => {\n      axios(requestConfig).then(response => {\n        if (response.status === 200) {\n          resolve({\n            data: response.data,\n            status: response.status,\n            headers: response.headers\n          });\n        } else {\n          const error = new Error();\n          error.data = response.data;\n          error.status = response.status;\n          error.headers = response.headers;\n          reject(error);\n        }\n      }).catch(function (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          if (error.response.status === 401) {\n            console.log(error.response.status); //  handle401();\n\n            error.response.handleRefresh = true;\n          }\n\n          reject(new ApplicationError({\n            error: error.response.data,\n            status: error.response.status\n          }));\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          reject(new ApplicationError({\n            message: \"No response from server\"\n          }));\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          reject(new ApplicationError({\n            message: \"Something happened in setting up the request that triggered an Error\"\n          }));\n        }\n\n        reject(new ApplicationError({\n          error: error.response.data\n        }));\n      });\n    });\n  }\n\n}\n\nexport default Service;","map":{"version":3,"names":["axios","ApplicationError","Service","fetch","method","base","path","timeout","params","headers","postData","defaultHeaders","defaultParams","requestData","Object","keys","length","data","console","log","requestHeaders","requestParams","requestEndpoint","requestMethod","toUpperCase","requestConfig","url","responseType","Promise","resolve","reject","then","response","status","error","Error","catch","handleRefresh","request","message"],"sources":["/Users/bkarisik/Documents/Test/sawpi_frontend/swapi_front/src/api/service.js"],"sourcesContent":["import axios from \"axios\";\nimport ApplicationError from \"../utils/ApplicationError\";\n\n// import request from 'request';\n// import {\n//   generateHeaders,\n//   detectLocale,\n//   getRequestConfigForLogging,\n//   // getSummaryObjectForApiResponseTime,\n//   getHistogramObjectForApiResponseTime,\n// } from '../utils/Helpers';\n// import Logger from '../utils/Logger';\n\n// // const summary = getSummaryObjectForApiResponseTime();\n// const histogram = getHistogramObjectForApiResponseTime();\n\n// TODO: Intercept all responses for data and time logging purposes\n\nclass Service {\n  /**\n   * The base fetch method to get data from APIs\n   * @param {Object} requestConfig\n   * @param {String} requestConfig.method Method of request. Eg. GET, POST, PUT, DELETE, PATCH.\n   * @param {String} requestConfig.base Base domain of the request. This is the part of the URL before the path.\n   * @param {String} requestConfig.path Path of the request.\n   * @param {String} requestConfig.timeout Timout of the request in milliseconds.\n   * @param {Object} requestData\n   * @param {Object} requestData.params The GET parameters for the request.\n   * @param {Object} requestData.headers Custom headers that need to be part of the request.\n   * @param {Object} requestData.postData The POST data for the request.\n   * @return {Promise} Returns the promise object for the request.\n   */\n  static fetch(\n    { method = \"GET\", base = \"\", path, timeout = 0 } = {},\n    { params = {}, headers = {}, postData = {} } = {}\n  ) {\n    const defaultHeaders = {};\n    const defaultParams = {};\n\n    let requestData = {};\n    if (Object.keys(postData).length > 0) {\n      requestData.data = postData;\n    }\n    console.log(requestData, data);\n\n    const requestHeaders = { ...defaultHeaders };\n    const requestParams = { ...defaultParams, ...params };\n    const requestEndpoint = base + path;\n    const requestMethod = method.toUpperCase();\n    const requestConfig = {\n      url: requestEndpoint,\n      method: requestMethod,\n      headers: requestHeaders,\n      params: requestParams,\n      ...(requestMethod !== \"GET\" ? requestData : {}),\n      responseType: \"json\",\n      // proxy: {\n      //   protocol: 'http',\n      //   host: 'localhost',\n      //   port: 8081,\n      // },\n    };\n\n    return new Promise((resolve, reject) => {\n      axios(requestConfig)\n        .then((response) => {\n          if (response.status === 200) {\n            resolve({\n              data: response.data,\n              status: response.status,\n              headers: response.headers,\n            });\n          } else {\n            const error = new Error();\n            error.data = response.data;\n            error.status = response.status;\n            error.headers = response.headers;\n\n            reject(error);\n          }\n        })\n        .catch(function (error) {\n          if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            if (error.response.status === 401) {\n              console.log(error.response.status);\n              //  handle401();\n              error.response.handleRefresh = true;\n            }\n            reject(new ApplicationError({ error: error.response.data, status: error.response.status }));\n          } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            reject(new ApplicationError({ message: \"No response from server\" }));\n          } else {\n            // Something happened in setting up the request that triggered an Error\n\n            reject(\n              new ApplicationError({\n                message: \"Something happened in setting up the request that triggered an Error\",\n              })\n            );\n          }\n          reject(new ApplicationError({ error: error.response.data }));\n        });\n    });\n  }\n}\n\nexport default Service;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}